WEEK 12

1] A binary number is a combination of 1s and 0s. Its nth least significant digit is the nth digit starting from the right starting with 1. Given a decimal number, convert it to binary and determine the value of the the 4th least significant digit.

Example

number = 23

·         Convert the decimal number 23 to binary number: 2310 = 24 + 22 + 21 + 20    = (10111)2.

·         The value of the 4th index from the right in the binary representation is 0.

Function Description

 Complete the function fourthBit in the editor below.

fourthBit has the following parameter(s):

int number:  a decimal integer

Returns:

int: an integer 0 or 1 matching the 4th least significant digit in the binary representation of number.

Constraints

0 ≤ number < 231

Input Format for Custom Testing

Input from stdin will be processed as follows and passed to the function.

The only line contains an integer, number.

Sample Case 0

Sample Input 0

STDIN  Function

-----  --------

32   → number = 32

Sample Output 0

0


Explanation 0
·         Convert the decimal number 32 to binary number: 3210 = (100000)2.

·         The value of the 4th index from the right in the binary representation is 0.

Sample Case 1

Sample Input 1

STDIN   Function

-----   --------

77   →  number = 77

Sample Output 1

1
 

Explanation 1

·         Convert the decimal number 77 to binary number: 7710 = (1001101)2.

·         The value of the 4th index from the right in the binary representation is 1.

Answer:(penalty regime: 0 %)

#include <stdio.h>

int fourthBit(int number) {
    return (number >> 3) & 1;
}

int testMain() { 
    int number;
    scanf("%d", &number);
    printf("%d\n", fourthBit(number));
    return 0;
}

Test	Expected	Got	
printf("%d", fourthBit(32))
Got
0
Passed all tests!  

2] Determine the factors of a number (i.e., all positive integer values that evenly divide into a number) and then return the pth element of the list, sorted ascending. If there is no pth element, return 0.

Example

n = 20

p = 3

The factors of 20 in ascending order are {1, 2, 4, 5, 10, 20}. Using 1-based indexing, if p = 3, then 4 is returned. If p > 6, 0 would be returned.

Function Description

 
Complete the function pthFactor in the editor below.

pthFactor has the following parameter(s):

int n:  the integer whose factors are to be found

int p:  the index of the factor to be returned


Returns:

int: the long integer value of the pth integer factor of n or, if there is no factor at that index, then 0 is returned

Constraints


1 ≤ n ≤ 1015

1 ≤ p ≤ 109

 
Input Format for Custom Testing
Input from stdin will be processed as follows and passed to the function.
The first line contains an integer n, the number to factor.
The second line contains an integer p, the 1-based index of the factor to return.

Sample Case 0

Sample Input 0

 STDIN      Function

-----      --------

10     →   n = 10

3      →   p = 3

 

Sample Output 0
5


Explanation 0

 Factoring n = 10 results in {1, 2, 5, 10}. Return the p = 3rd factor, 5, as the answer.
Sample Case 1

Sample Input 1

 STDIN      Function

-----      --------

10     →   n = 10

5      →   p = 5

Sample Output 1

 0
Explanation 1

 Factoring n = 10 results in {1, 2, 5, 10}. There are only 4 factors and p = 5, therefore 0 is returned as the answer.

 Sample Case 2

Sample Input 2


STDIN      Function

-----      --------

1     →   n = 1

1     →   p = 1

 

Sample Output 2

1


Explanation 2

Factoring n = 1 results in {1}. The p = 1st factor of 1 is returned as the answer.


Answer:(penalty regime: 0 %)

#include <stdio.h>
#include<math.h>

long pthFactor(long n, long p) {
    long count = 0;
    
    for (long i = 1; i * i <= n; i++) {
        if (n % i == 0) {
            count++;
            if (count == p) return i; 
        }
    }
   
    for (long i = (long)sqrt(n); i >= 1; i--) {
        if (n % i == 0 && i != n / i) {
            count++;
            if (count == p) return n / i;
        }
    }
    return 0; }

int testmain() { 
    long n, p;
    scanf("%ld %ld", &n, &p); 
    printf("%ld\n", pthFactor(n, p)); 
    return 0;
}


Test		
printf("%ld", pthFactor(10, 3))
Got
5
Passed all tests!  

3]  You are a bank account hacker. Initially you have 1 rupee in your account, and you want exactly N rupees in your account. You wrote two hacks, first hack can multiply the amount of money you own by 10, while the second can multiply it by 20. These hacks can be used any number of time. Can you achieve the desired amount N using these hacks.

Constraints:

1<=T<=100

1<=N<=10^12

Input

 
·         The test case contains a single integer N. 

 

Output

For each test case, print a single line containing the string "1" if you can make exactly N rupees or "0" otherwise.

SAMPLE INPUT

1

 
SAMPLE OUTPUT

 
1



SAMPLE INPUT



2

SAMPLE OUTPUT

0


Answer:(penalty regime: 0 %)

int myFunc(int n)
{
if (n == 1)
return 1;
if (n % 10 == 0)
if (myFunc(n / 10) == 1)
return 1;
if (n % 20 == 0)
if (myFunc(n / 20) == 1)
return 1;
return 0;
}

Test		
printf("%d", myFunc(1))
Got
1

Passed all tests!  

4] Find the number of ways that a given integer, X, can be expressed as the sum of the Nth powers of unique, natural numbers.

For example, if X = 13 and N = 2, we have to find all combinations of unique squares adding up to 13. The only solution is 22 + 32.

Function Description

 
Complete the powerSum function in the editor below. It should return an integer that represents the number of possible combinations.

powerSum has the following parameter(s):

 

X: the integer to sum to

N: the integer power to raise numbers to

Input Format

The first line contains an integer X.

The second line contains an integer N.

Constraints

 

1 ≤ X ≤ 1000

2 ≤ N ≤ 10

 

Output Format

Output a single integer, the number of possible combinations calculated.

Sample Input 0

10

2

 

Sample Output 0

 
1

 

Explanation 0

 
If X = 10 and N = 2, we need to find the number of ways that 10 can be represented as the sum of squares of unique numbers.

 
10 = 12 + 32

This is the only way in which 10 can be expressed as the sum of unique squares.


Sample Input 1

 

100

2

Sample Output 1
 

3

 
Explanation 1

100 = (102) = (62 + 82) = (12 + 32 + 42 + 52 + 72)

Sample Input 2

 

100

3

Sample Output 2

 

1

 

Explanation 2

 

100 can be expressed as the sum of the cubes of 1, 2, 3, 4.

(1 + 8 + 27 + 64 = 100). There is no other way to express 100 as the sum of cubes.


Answer:(penalty regime: 0 %)


int powerSum(int x, int m, int n)
{
int tmp;
tmp = 1;
for(int i = 1; i <= n; i++)
tmp = tmp * m;
if (tmp == x)
return 1;
if (tmp > x)
return 0;
return powerSum(x, m + 1, n) + powerSum(x - tmp, m + 1, n);
}

Test		
printf("%d", powerSum(10, 1, 2))
Got
1
Passed all tests!  